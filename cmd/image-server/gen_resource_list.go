// This program generates resources_list.go. It can be invoked by running
// go generate ./...

// +build ignore

package main

import (
	"encoding/csv"
	"io"
	"log"
	"os"
	"strconv"
	"text/template"
	"time"
)

const resourceFiles = "resource_files.csv"

type Row struct {
	Path          string
	Valid         bool
	PaletteNr     int
	Width, Height int
	TabFile       string
	TabOffset     int
}

func toInt(txt string, defaultValue int) int {
	if value, err := strconv.Atoi(txt); txt != "" && err == nil {
		return value
	}
	return defaultValue
}

func main() {

	csvFile, err := os.Open(resourceFiles)
	if err != nil {
		log.Fatalln("Couldn't open the csv file:", err)
	}

	// Parse the file
	buf := csv.NewReader(csvFile)
	buf.Comma = ';'
	buf.Comment = '#'

	var rows []*Row

	// Iterate through the records
	for {
		// Read each record from csv
		record, err := buf.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatal(err)
		}
		row := &Row{
			Path:      record[0],
			PaletteNr: toInt(record[1], -1),
			Width:     toInt(record[2], -1),
			Height:    toInt(record[3], -1),
			TabFile:   record[4],
			TabOffset: toInt(record[5], -1),
		}
		row.Valid = row.PaletteNr != -1

		//fmt.Printf("row: %q\n", record)
		//fmt.Printf("row: %s: %d %v\n", row.Path, row.PaletteNr, row.Valid)
		if row.Path != "" {
			rows = append(rows, row)
		}
	}

	f, err := os.Create("resource_list.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Input     string
		Rows      []*Row
	}{
		Timestamp: time.Now(),
		Input:     resourceFiles,
		Rows:      rows,
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated automatically based on {{ .Input }}
// {{ .Timestamp }}
package main

type ImageEntry struct {
	PaletteNr int
	Width     int
	Height    int
	TabFile   string
	TabOffset int
}

var images = map[string]ImageEntry{
{{- range .Rows }}
	{{- if .Valid }}
	{{ printf "%q" .Path }}: { {{- .PaletteNr }}, {{ .Width }}, {{ .Height }}, {{ printf "%q" .TabFile }}, {{ .TabOffset -}} },
	{{- else }}
	// {{ .Path }}
	{{- end }}
{{- end }}
}
`))
